README =========================================================================

This is NFSTRACE also known as NST (NAS Sizing Tool/NFS Statistic Tool).
It helps to determine NFS procedures in network traffic and performs packetâ€™s
capturing, filtration, dumping traces to .pcap file, compression by external
tool, some kind of statistical analysis and provides API for custom
analysis modules.

Detailed technical description you can find in docs/NFSTRACE.Releasenotes.pdf
or on the following page;
https://docs.google.com/document/d/185ghjXQOhYllzZzmAi2VJg38lk2tnAchGvmgW0ua9Wo/edit?usp=sharing

Problems, bugs, questions, desirable enhancements, etc. should be sent
to Pavel Karneliuk (Pavel_Karneliuk@epam.com)

Original authors:
Vitali  Adamenka        Vitali_Adamenka@epam.com
Yauheni Azaranka        Yauheni_Azaranka@epam.com
Alexey  Costroma        Alexey_Costroma@epam.com
Dzianis Huznou          Dzianis_Huznou@epam.com
Pavel   Karneliuk       Pavel_Karneliuk@epam.com
Mikhail Litvinets       Mikhail_Litvinets@epam.com


Build by CMake =================================================================
Create a build directory in top-level directory:

    $ mkdir ./release

Change into your build directory:

    $ cd ./release

Run cmake pointing it to the directory of the top-level CMakeLists.txt.
The -DCMAKE_BUILD_TYPE=Release produces release configuration.
Other configurations(Debug, MinSizeRel, RelWithDebInfo) are avaliable likewise.
CMake will check compiler, libraries and generate build scripts for main
application, analyzers and tests. All files will be created in current directory
Note: In FreeBSD 8.4 your need to install gcc >= 4.8 and edit /etc/libmap.conf
according to: http://www.freebsd.org/doc/en/articles/custom-gcc/article.html

    $ cmake -DCMAKE_BUILD_TYPE=Release ../

After that, you can start to build application:

    $ make

Binaries will be created in current directory

Build by CMake with special compiler ===========================================
Set up environment variables with path to the compiler:

for Linux:
    export CC="/usr/bin/gcc"
    export CXX="/usr/bin/g++"

for FreeBSD:
    setenv CC "/usr/local/bin/gcc48"
    setenv CXX "/usr/local/bin/g++48"

Then build by CMake as described above or pass these variables to shell
directly for cmake command, f.e.:
CC="/usr/bin/gcc48" CXX="/usr/bin/g++48" cmake -DCMAKE_BUILD_TYPE=Release ../

Installation by CMake ==========================================================
Create a build directory in top-level directory:

    $ mkdir ./release

Change into your build directory:

    $ cd ./release

Run CMake to generate build scripts main application and it's plugins
(Note: Use /usr or /usr/local for most cases):

    $ cmake -DCMAKE_INSTALL_PREFIX=/your/path ../

Run make. It will build and install nfstrace and it's plugins and plugin api
headers in /your/path/bin, /your/path/lib/nfstrace/ and
/your/path/include/nfstrace respectively:

    $ sudo make install

Test by CMake ==================================================================
Build application and run following command from build directory:

    $ make test

Scripts will compare output of processing traces with reference results.
