Introduction
The nfstrace (software) helps to determine NFS procedures in network traffic and performs packet’s capturing, filtration, dumping traces, compression, statistical analysis, visualization and provides API for custom analysis modules.
Following stack of protocols is supported: Ethernet – IPv4 – TCP | UDP – SunRPC/NFSv3.
Modern versions, like IPv6 and NFSv4 to be added.
Definitions
TR1 – Technical Report 1, extension for C++ standard library
SUS – Single UNIX Specification
POSIX – Portable Operating System Interface for Unix
GPL – General Public License
Wireshark – Enterprise quality tool-set for network traffic analysis.
BPF – Berkeley Packet Filter
LSF – Linux Socket Filtering, is derived from the BPF
NIC – Network Interface Card
NFS – Network File System Protocol
RPC/NFSv3 headers – Parts of RPC messages, which are useful in NST analysis
Payload – User’s data transferred by NFS protocol. Useless in NST analysis
wsize,rsize – options of NFS client connection to a NFS server
DPI – Deep Packet Inspection, NST is complicated form of DPI
gnuplot – CLI tool that can generate two- and three-dimensional plots of data, and data fits.
Product details
Target OS
The software has been developed and run as command line utility on GNU/Linux (Fedora Core 18, Fedora Core 12) and FreeBSD 8.2. The implementation written on C++03 + TR1 and uses standard SYS and POSIX interfaces and libraries: libpthread, libpcap, libstdc++.

$ ldd nfstrace
        linux-vdso.so.1 =>  (0x00007fff53fff000)
        libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00000037bac00000)
        libpthread.so.0 => /lib64/libpthread.so.0 (0x0000003a81c00000)
        libpcap.so.1 => /usr/lib64/libpcap.so.1 (0x00000037af800000)
        libdl.so.2 => /lib64/libdl.so.2 (0x00000037af400000)
        libm.so.6 => /lib64/libm.so.6 (0x00000037afc00000)
        libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00000037b6800000)
        libc.so.6 => /lib64/libc.so.6 (0x00000037af000000)
        /lib64/ld-linux-x86-64.so.2 (0x00000037aec00000)
 
The software doesn’t use any external libraries due to portability reasons and licensing limitations. Utility does not use any Wireshark libraries due to the code of it libraries (protocols’ dissectors) have published under GPLv2 license.
Hardware Interfaces
Nfstrace captures raw packets from an ethernet interface via libpcap interface of Linux (LSF) or FreeBSD (BPF) implementations. Current implementation makes assumption that libpcap delivers correct TCP or UDP packets. Assembling ethernet frames to IP packets and IP packets defragmentation performs in the Kernel. The software have tested on direct linked workstations with 1Gbps integrated NICs (Ethernet 1000baseT/Full). Nfstrace demonstrates perfect performance even in live capturing/filtration/analysis mode. 
Implementation Details

Command-line interface (CLI)
The nfstrace has following command-line interface:
 
$ nfstrace -a ./analyzers/libbreakdown.so -a ./analyzers/libofws.so -a ./analyzers/libofdws.so -h
Usage: nfstrace [OPTIONS]...
   -i, --interface=INTERFACE            (default:) listen interface, it is required for live and dump modes
   -f, --filter=BPF                         (default:tcp port 2049) a packet filter in libpcap BPF syntax
   -s, --snaplen=0..65535               (default:65535) max length of raw captured packet. May be used ONLY FOR UDP
   -t, --timeout=Milliseconds               (default:250) set the read timeout that will be used on a capture
   -m, --mode=live|dump|stat                (default:live) set runing mode
   -a, --analyzer=PATH#opt1,opt2=val,... (default:) specify path to analysis module and pass desired options
   -I, --ifile=PATH                              (default:INTERFACE-BPF.pcap) input file for stat mode, the '-' means stdin
   -O, --ofile=PATH                          (default:INTERFACE-BPF.pcap) output file for dump mode, the '-' means stdout
   -C, --command                             (default:) execute command for each dumped file
   -D, --dump-size=MBytes                (default:0) size of dumping file portion, 0 = no limit
   -B, --bsize=MBytes                    (default:20) size of capturing kernel buffer
   -M, --msg-header=1..4000              (default:512) RPC message will be truncated to this limit in bytes before passing to Analysis
   -Q, --qcapacity=1..65535             (default:256) initial queue capacity of RPC messages
   -v, --verbose                        (default:false) print out additional information and trace to console collected NFSv3 procedures
   -h, --help                           (default:false) print this help message and usage for analyzers passed via -a options, then exit
Usage of ./analyzers/libbreakdown.so:
ACC - for accurate evaluation, MEM - for memory undemanding evaluation. Options cannot be combined
Usage of ./analyzers/libofws.so:
Arguments aren't supported. TODO: add description of OFWS Analyser
Usage of ./analyzers/libofdws.so:
bu_size - for specifying amount of buckets. Range: 1..32767 [16 by default]
bl_size - for specifying block size [KB]. Range: 1..31 [8 by default]
 
This example shows the output of --help (-h) operation. It shows command line interface description of the nfstrace and description of pluggable analysis modules passed by –analyzer (-a) parameters.
Running modes
The nfstrace tool may be run in 3 different modes:
on-line dumping (--mode=dump): perform online traffic capturing, filtration and dumping packets to the specified output file.
off-line analysis (--mode=stat): perform offline filtration any .pcap file with captured traces and perform analysis by pluggable modules or print out found NFSv3 procedures to console (-v option).
on-line analysis (--mode=live): perform online capturing, filtration and live analysis detected NFS procedures by a pluggable analysis modules or print-out them to console (-v option).
Filtration
Let see to following case: writing 1Gb file to a NFS storage:

This action will be performed by some LOOKUP, READDIRPLUS, COMMIT, GETATTR, etc. and some (thousands?) WRITE procedures of NFS protocol. The nfstrace must catch all of them. How many RPC/NFS procedures will be perform? It depends on wsize. Wsize is an option of NFS client, defines the number of bytes that NFS uses when writing files to an NFS server by one WRITE procedure. When wsize is 512 Kbytes a NFS client should (in general) perform 1Gb/512Kb WRITE procedures. So, for writing 1Gb file to a NFS storage, a NFS client (with wsize=512k) should perform 2000 WRITE procedures + some other procedures like GETATTR, etc.

Each NFS procedure consists by 2 RPC messages: Call – request from client to server and Reply – reply from server with result of requested procedure. Both RPC messages may contain data useful for NST analysis. Both RPC messages may contain thousands of payload bytes useless for analysis. So - nfstrace must capture headers of calls and replies, and then match pairs of them to complete NFS procedures.

Approximately 1024 bytes is required to capture the headers all the way up to the NFS protocol headers. Because Sun RPC messages have two optional fields that may be up to 400 bytes.

The ‘snaplen’ is very useful option, but for NFS procedures over UDP protocol ONLY. This option set-up the number of bytes of a packet for uprising from the Kernel to userspace. In case of TCP transport layer this options is useless because TCP connection is a bidirectional stream of data (instead of UDP that is form of interchange up to 64k datagrams). In case of NFS over TCP, the nfstrace must capture whole packets and copy them to userspace from the Kernel for DPI and performing NST analysis.

Finally, nfstrace must filtrate whole NFS traffic passed from the Kernel to userspace and detects RPC/NFSv3 message headers (up to 4kbytes) within gigabytes of network traffic.

Detected headers are copied to internal buffers (or dumped to a file) for statistic analysis.

The key principle of Filtration in nfstrace is: “Discard payload ASAP”
The Filtration module works in separate thread that captures packets from network interface by libpcap. It matches a packet to a related session (TCP or UDP) and performs reassembling TCP stream from TCP segment of a packet. After that, a part of packet have passed to RPCFiltrator.

There are two RPCFiltrator in one TCP session. Both of them known state of current RPC message in related TCP flow. They can detect RPC messages and perform action on a packet – discard it or collect it for analysis.

The ‘-B’ option of nfstrace set-up size of capturing buffer in the Kernel of operating system in megabytes. This option is very critical for capturing performance.
The wsize and rsize of NFS connections are meaningful for filtration and analysis performance too.
Dump File Format
The nfstrace uses libpcap file format for input and output files. Filtered packets have saved in .pcap format too. Any external tool (like Wireshark) may be used for inspect filtered traces. Filtrated headers of RPC messages have passed from Filtration to Analysis modules in raw data buffers via Queue of Analysis module.

Compression 
The compression and decompression performs by external tools. It is very similar to tcpdump -z option. For instance:

$ sudo nfstrace --mode=dump -i eth0 --filter="tcp or udp port 2049" -O dump.pcap --dump-size=10 --command "bzip2 -f -9"

This command run nfstrace in dumping mode (--mode=dump). Capturing from network interface requires super-user privileges, so – sudo. In this mode, the application performs live capturing packets from network interface eth0 (-i eth0) and filtration NFS procedures (calls + replies). Then it dumps filtered packets that contains RPC/NFSv3 headers (or contains parts of these headers). Filtration in the Kernel performs by BPF filter (--filter="tcp or udp port 2049"). It means that we are interested in any TCP or UDP packets send to or from port 2049(default port for NFS servers). Also, this command specifies the output file dump.pcap (-O dump.pcap). In case of the output file will be huge (tons of Mb) it will be divided to parts by 10Mb (--dump-size=10).

When the part’s dumping is compete, the dumping will be continued to another file (dump.pcap-1, dump.pcap-2, dump.pcap-N) and nfstrace spawns child process (by fork() & exec() calls) that executes command (passed by --command "bzip2 -f -9") “bzip2 -f -9 dump.pcap” over each dumped part.

After dumping interruption via Control-C(SIGINT) or Control-\(SIGQUIT) the application closes with flushing captured data and we got a set of compressed parts of filtered traffic:
 
$ ls -la
total 1452
drwxr-xr-x. 12 dev  wheel   24576 2013-10-07 18:39 .
drwxr-xr-x.  6 dev  wheel   4096 2013-10-03 15:40 ..
-rw-r--r--.  1 root root    22342 2013-10-07 18:39 dump.pcap-1.bz2
-rw-r--r--.  1 root root    20241 2013-10-07 18:39 dump.pcap-2.bz2
-rw-r--r--.  1 root root    17231 2013-10-07 18:39 dump.pcap-3.bz2
-rw-r--r--.  1 root root    16047 2013-10-07 18:39 dump.pcap-4.bz2
-rw-r--r--.  1 root root    16182 2013-10-07 18:39 dump.pcap-5.bz2
-rw-r--r--.  1 root root    16781 2013-10-07 18:39 dump.pcap-6.bz2
-rw-r--r--.  1 root root    16589 2013-10-07 18:39 dump.pcap-7.bz2
-rw-r--r--.  1 root root    16076 2013-10-07 18:39 dump.pcap-8.bz2
-rw-r--r--.  1 root root    10948 2013-10-07 18:39 dump.pcap-9.bz2
-rw-r--r--.  1 root root    29586 2013-10-07 18:39 dump.pcap.bz2
 
These compressed parts have filtered data and may be join to one .pcap file by: 

$ bzcat dump.pcap.bz2 dump.pcap-1.bz2 dump.pcap-2.bz2 >dump.pcap

dump.pcap may be opened in any external tool that known .pcap format, f.e. – Wireshark. Only the dump.pcap.bz2 has .pcap file header, so parts have only data and can’t be recognized as .pcap file by external tool.

The compressed parts of dump may be decompressed by bzcat tool to stdin of nfsrace application for offline analysis by an analyzer module or prints-out to console:
 
$ bzcat dump.pcap.bz2 dump.pcap-1.bz2 dump.pcap-2.bz2 dump.pcap-3.bz2 | nfstrace --mode=stat -I - --verbose

This command run bzcat tool, which decompress set of parts, merges them to one stream and put in to a pipe. Nfstrace runs in statistic mode (--mode=stat) for reading data from that pipe via stdin (-I -) and prints (by --verbose) all detected NFS procedures (call+reply) to console:
…
10.6.136.113:978 --> 10.6.136.214:2049 [TCP] WRITE XID: 3584059 CALL [ file: 7952bb15...00000000 offset: 0 count: 32768 stable: UNSTABLE] REPLY [ status: OK ]
10.6.136.113:978 --> 10.6.136.214:2049 [TCP] WRITE XID: 20361275 CALL [ file: 7952bb15...00000000 offset: 32768 count: 32768 stable: UNSTABLE] REPLY [ status: OK ]
10.6.136.113:978 --> 10.6.136.214:2049 [TCP] WRITE XID: 37138491 CALL [ file: 7952bb15...00000000 offset: 65536 count: 32768 stable: UNSTABLE] REPLY [ status: OK ]
…

The external compression tool may be chosen within available on a platform.
Pluggable Analysis Modules
The API of nfstrace provides C++ headers with definition of IAnalyzer interface and couple of related types and NFS data types. An IAnalyzer interface is a set of NFSv3 handlers that will be called by Analysis module for each NFSv3 procedure.
A pluggable analysis module should be a dynamic linked shared object that exports following C functions:

const char* usage (); // return description of expected opts for create(opts)
IAnalyzer*    create (const char* opts); // create and return an instance of an Analyzer
void        destroy (IAnalyzer* instance); // destroy created instance of an Analyzer

The usage() must return C-string with description of module and required parameters for creation an instance of analyzer to show in CLI.

The IAnalyzer* create(const char* opts) must create and return an instance of analyzer accordingly to passed options.

The void destroy(IAnalyzer* instance) must destroy previously created analyzer instance and performs required clean-up (for instance - close connection to a database).
 
The tests/test_plugin is an example of minimal implementation of pluggable analysis module.

All existing analyzers are implemented as pluggable analysis modules and may be attached to nfstrace via -a option.
Analysis Toolset
Operation Breakdown Analyzer (OB)
The OB implemented as pluggable analysis module libbreakdown.so.

The NFS procedure latency have calculate as difference between timestamp of come-in last TCP(UDP) packet of header of RPC/NFS reply-message and timestamp of come-in last TCP(UDP) packet of header of related NFS call-message.

Standard Deviation of latency may be calculate by two algorithms. Two-pass algorithm generates correct standard deviation value but requires a lot of memory for storage all latencies till final computation. One-pass algorithm is memory-efficient but it can accumulate computation error in case of large number of small latencies. OB implements both algorithms. They may be chosen by passing parameter while attaching OB analyzer to nfstrace.
 
$ nfstrace -a ./analyzers/libbreakdown.so -h
Usage: nfstrace [OPTIONS]
   ...
Usage of ./analyzers/libbreakdown.so:
ACC - for accurate evaluation, MEM - for memory undemanding evaluation. Options cannot be combined

MEM means Knuth’s one-pass algorithm. ACC means stable two-pass algorithm. ACC is default.

Let see example of OB usage. bzcat tool extracts collected trace from compressed archive to pipe. This archive contains traces of packets of two NFS sessions over TCP protocol. Each session mounts a NFS folder (there are two auxiliary session with NULL NFS procedures) and writes 10Mb of data to it.

The 10.6.137.24 NFS server has wsize=512Kb and we can see 20 WRITE procedures for it.
The 10.6.136.214 NFS server has wsize=32Kb and we can see 320 WRITE procedures for it.
 
$ bzcat data-assets/2sessions-tcp-wsize32k-tcp-wsize512k.pcap.bz2 | nfstrace -m stat -I - -a analyzers/libbreakdown.so
###  Breakdown analyzer  ###
Total calls: 413. Per operation:
NULL            4   0.97%
GETATTR         7   1.69%
SETATTR         2   0.48%
LOOKUP                17   4.12%
ACCESS                15   3.63%
READLINK               0   0.00%
READ                       5   1.21%
WRITE                   340  82.32%
CREATE          2   0.48%
MKDIR           2   0.48%
SYMLINK         0   0.00%
MKNOD           0   0.00%
REMOVE          2   0.48%
RMDIR           2   0.48%
RENAME          0   0.00%
LINK                    0   0.00%
READDIR         0   0.00%
READDIRPLUS     7   1.69%
FSSTAT          0   0.00%
FSINFO          4   0.97%
PATHCONF        2   0.48%
COMMIT          2   0.48%
Per connection info:
Session: 10.6.136.107:9322 --> 10.6.137.24:2049 [TCP]
Total: 46. Per operation:
NULL            Count:  1 (  2.17%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
GETATTR     Count:  4 (  8.70%) Min: 0.000 Max: 0.001 Avg: 0.000 StDev: 0.00006949
SETATTR     Count:  1 (  2.17%) Min: 0.013 Max: 0.013 Avg: 0.013 StDev: 0.00000000
LOOKUP      Count:  5 ( 10.87%) Min: 0.000 Max: 0.001 Avg: 0.001 StDev: 0.00033471
ACCESS      Count:  4 (  8.70%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00051993
READLINK    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READ        Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
WRITE       Count:   20 ( 43.48%) Min: 0.052 Max: 0.673 Avg: 0.226 StDev: 0.18726920
CREATE      Count:  1 (  2.17%) Min: 0.018 Max: 0.018 Avg: 0.018 StDev: 0.00000000
MKDIR       Count:  1 (  2.17%) Min: 0.047 Max: 0.047 Avg: 0.047 StDev: 0.00000000
SYMLINK     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKNOD       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
REMOVE      Count:  1 (  2.17%) Min: 0.019 Max: 0.019 Avg: 0.019 StDev: 0.00000000
RMDIR       Count:  1 (  2.17%) Min: 0.013 Max: 0.013 Avg: 0.013 StDev: 0.00000000
RENAME      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
LINK            Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIRPLUS Count:  3 (  6.52%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00004571
FSSTAT      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSINFO      Count:  2 (  4.35%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00001626
PATHCONF              Count:     1 (  2.17%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00000000
COMMIT      Count:  1 (  2.17%) Min: 0.148 Max: 0.148 Avg: 0.148 StDev: 0.00000000
Session: 10.6.136.107:9316 --> 10.6.136.214:2049 [TCP]
Total: 1. Per operation:
NULL                        Count:    1 (100.00%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00000000
GETATTR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
SETATTR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
LOOKUP      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
ACCESS      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READLINK    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READ        Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
WRITE       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
CREATE      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKDIR       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
SYMLINK     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKNOD       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
REMOVE      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
RMDIR       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
RENAME      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
LINK            Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIRPLUS Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSSTAT      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSINFO      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
PATHCONF    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
COMMIT      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
Session: 10.6.136.107:9318 --> 10.6.136.214:2049 [TCP]
Total: 365. Per operation:
NULL        Count:  1 (  0.27%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00000000
GETATTR     Count:  3 (  0.82%) Min: 0.001 Max: 0.004 Avg: 0.002 StDev: 0.00186981
SETATTR     Count:  1 (  0.27%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00000000
LOOKUP      Count:   12 (  3.29%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00003838
ACCESS      Count:   11 (  3.01%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00026510
READLINK    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READ        Count:  5 (  1.37%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00023933
WRITE       Count:  320 ( 87.67%) Min: 0.004 Max: 0.019 Avg: 0.008 StDev: 0.00281979
CREATE      Count:  1 (  0.27%) Min: 0.002 Max: 0.002 Avg: 0.002 StDev: 0.00000000
MKDIR       Count:  1 (  0.27%) Min: 0.002 Max: 0.002 Avg: 0.002 StDev: 0.00000000
SYMLINK     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKNOD       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
REMOVE      Count:  1 (  0.27%) Min: 0.016 Max: 0.016 Avg: 0.016 StDev: 0.00000000
RMDIR       Count:  1 (  0.27%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00000000
RENAME      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
LINK            Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIRPLUS Count:  4 (  1.10%) Min: 0.001 Max: 0.005 Avg: 0.002 StDev: 0.00190528
FSSTAT      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSINFO      Count:  2 (  0.55%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00001697
PATHCONF    Count:  1 (  0.27%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00000000
COMMIT      Count:  1 (  0.27%) Min: 0.001 Max: 0.001 Avg: 0.001 StDev: 0.00000000
Session: 10.6.136.107:9320 --> 10.6.137.24:2049 [TCP]
Total: 1. Per operation:
NULL            Count:  1 (100.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
GETATTR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
SETATTR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
LOOKUP      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
ACCESS      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READLINK    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READ        Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
WRITE       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
CREATE      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKDIR       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
SYMLINK     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKNOD       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
REMOVE      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
RMDIR       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
RENAME      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
LINK            Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIRPLUS Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSSTAT      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSINFO      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
PATHCONF    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
COMMIT      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
nfstrace: Filtration is done
 
In addition, the OB produces .dat files for each detected NFS session:

$ ls -la
total 100
drwxr-xr-x. 12 dev wheel 24576 2013-10-08 14:28 .
drwxr-xr-x.  6 dev wheel  4096 2013-10-03 15:40 ..
-rw-r--r--.  1 dev wheel   499 2013-10-08 14:28 breakdown_10.6.136.107:9316 --> 10.6.136.214:2049 [TCP].dat
-rw-r--r--.  1 dev wheel   961 2013-10-08 14:28 breakdown_10.6.136.107:9318 --> 10.6.136.214:2049 [TCP].dat
-rw-r--r--.  1 dev wheel   498 2013-10-08 14:28 breakdown_10.6.136.107:9320 --> 10.6.137.24:2049 [TCP].dat
-rw-r--r--.  1 dev wheel   910 2013-10-08 14:28 breakdown_10.6.136.107:9322 --> 10.6.137.24:2049 [TCP].dat
 
OB has two optional modules for demonstration visualization via gnuplot:
-       breakdown.plt – gnuplot script for a histogram generation;
-       nst.sh – “glue” for passing a .dat file to breakdown.plt and invocation gnuplot tool.

The example of invocation:
$ analyzers/nst.sh -a analyzers/breakdown.plt -d . -p 'breakdown*.dat' -v
gnuplot -e "i_file='./breakdown_10.6.136.107:9316 --> 10.6.136.214:2049 [TCP].dat';o_file='./breakdown_10.6.136.107:9316 --> 10.6.136.214:2049 [TCP].dat.png'" analyzers/breakdown.plt
gnuplot -e "i_file='./breakdown_10.6.136.107:9318 --> 10.6.136.214:2049 [TCP].dat';o_file='./breakdown_10.6.136.107:9318 --> 10.6.136.214:2049 [TCP].dat.png'" analyzers/breakdown.plt
gnuplot -e "i_file='./breakdown_10.6.136.107:9320 --> 10.6.137.24:2049 [TCP].dat';o_file='./breakdown_10.6.136.107:9320 --> 10.6.137.24:2049 [TCP].dat.png'" analyzers/breakdown.plt
gnuplot -e "i_file='./breakdown_10.6.136.107:9322 --> 10.6.137.24:2049 [TCP].dat';o_file='./breakdown_10.6.136.107:9322 --> 10.6.137.24:2049 [TCP].dat.png'" analyzers/breakdown.plt

Overall File Working Set Analyzer (OFWS)
The OFWS implemented as pluggable analysis module libofws.so.
The example of invocation:
$ bzcat data-assets/2sessions-tcp-wsize32k-tcp-wsize512k.pcap.bz2 | nfstrace -m stat -I - -a analyzers/libofws.so
###  Overall File Working Set (OFWS) analyzer  ###
Total number of files accessed: 16
FileHandle,NFSOps,NULL,GETATTR,SETATTR,LOOKUP,ACCESS,READLINK,READ,WRITE,CREATE,MKDIR,SYMLINK,MKNOD,REMOVE,RMDIR,RENAME,LINK,READDIR,READDIRPLUS,FSSTAT,FSINFO,PATHCONF,COMMIT
9725bb51046621880c00000031ea010025f77e6f0000000000000000,2,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9725bb51046621880c00000026ea01005f7f05380000000000000000,2,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9725bb51046621880c00000062ea010071c35a5c0000000000000000,3,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9725bb51046621880c0000006dea0100e4410e0e0000000000000000,3,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9725bb51046621880c0000007bea010008f6d8030000000000000000,3,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9725bb51046621880c00000089ea0100ca9725330000000000000000,3,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9725bb51046621880c00000099ea01008823c23d0000000000000000,3,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
9725bb51046621880c0000003cea01008a7e40710000000000000000,4,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
9725bb51046621880c000000652601008072c4330000000000000000,4,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0
9725bb51046621880c000000a68c020078286c3e0000000000000000,5,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
01000700471b060000000000065d92d0770abb440000000000000000,6,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0
01000701471b060000000000065d92d0770abb440000000000000000ed1b06008981bb17,6,0,1,0,1,2,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0
01000701471b060000000000065d92d0770abb440000000000000000f1021e0084cf361c,7,0,1,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,0,0
9725bb51046621880c000000d88c020071e9b85c0000000000000000,7,0,1,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,2,0,0,0,0
01000701471b060000000000065d92d0770abb440000000000000000f2021e0085cf361c,22,0,0,0,0,0,0,0,20,1,0,0,0,0,0,0,0,0,0,0,0,0,1
9725bb51046621880c000000d18d0200cdc19e1e0000000000000000,322,0,0,0,0,0,0,0,320,1,0,0,0,0,0,0,0,0,0,0,0,0,1
/nfstrace: Filtration is done

FileHandle (FH) in NFS may have various length for items (files/directories). There are two kind of FH 28 and 36 bytes length in this example.
Performance Testing Results
The nfstrace tool can be used to perform live traffic capturing, NFS procedures filtration and statistic analysis by pluggable analysis modules. It can be started by following command:

sudo nfstrace --mode=live --interface=em1 -B 20 -a ./analyzers/libbreakdown.so -a ./analyzers/libofws.so -a ./analyzers/libofdws.so
 
The live traffic capturing from network interface requires super-user privileges, so use sudo. The nfstrace runs in line mode (–mode=live) to capture packets from network interface em1 (--interface=em1) and sets capturing buffer in the Kernel to 20Mbytes (-B 20). Finally three analyzers are attached (-a ./analyzers/libbreakdown.so -a ./analyzers/libofws.so -a ./analyzers/libofdws.so).

Test-environment is a two development workstations with 1G Ethernet NICs joined directly by patch cord. One workstation have NFS shared folder in tmpfs (some RAM Drive). Other workstation mounts this NFS folder with wsize=32k on TCP transport protocol.

Machine 2-client (192.168.0.2) will write 1Gb data to Machine 1-server (192.168.0.1) via dd command (dd if=/dev/zero of=temp.file bs=1M count=1000) to a NFS shared folder.
Machine 2-client generates NFS traffic to Machine 1-server.
Machine 1-server runs nfstrace. The log of it has written to nfstrace.log file.

Due to wsize=32Kb and invocation of dd if=/dev/zero of=temp.file bs=1M count=1000 we expect 32000 WRITE procedures.  After interruption by Control-C we have following results:

One Direction SEND (Machine 2-client, Machine 1-server with nfstrace) Volume 1GB (SPEED ~111MB/s) wsize=32K (32000/32000)
 
$ sudo nfstrace  -i em1 -B 20 -a ./analyzers/libbreakdown.so -a ./analyzers/libofws.so -a ./analyzers//libofdws.so
###  Breakdown analyzer  ###
Total calls: 32195. Per operation:
NULL            0   0.00%
GETATTR         1   0.00%
SETATTR         1   0.00%
LOOKUP          0   0.00%
ACCESS          2   0.01%
READLINK        0   0.00%
READ            0   0.00%
WRITE               32000  99.39%
CREATE          0   0.00%
MKDIR           0   0.00%
SYMLINK         0   0.00%
MKNOD           0   0.00%
REMOVE          0   0.00%
RMDIR           0   0.00%
RENAME          0   0.00%
LINK            0   0.00%
READDIR         0   0.00%
READDIRPLUS     0   0.00%
FSSTAT          0   0.00%
FSINFO          0   0.00%
PATHCONF        0   0.00%
COMMIT               191   0.59%
Per connection info:
Session: 192.168.0.2:831 --> 192.168.0.1:2049 [TCP]
Total: 32195. Per operation:
NULL            Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
GETATTR     Count:  1 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
SETATTR         Count:    1 (  0.00%) Min: 0.091 Max: 0.091 Avg: 0.091 StDev: 0.00000000
LOOKUP      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
ACCESS      Count:  2 (  0.01%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00003960
READLINK    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READ        Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
WRITE                    Count:32000 ( 99.39%) Min: 0.000 Max: 0.006 Avg: 0.000 StDev: 0.00030652
CREATE      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKDIR       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
SYMLINK     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
MKNOD       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
REMOVE      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
RMDIR       Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
RENAME      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
LINK            Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIR     Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
READDIRPLUS Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSSTAT      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
FSINFO      Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
PATHCONF    Count:  0 (  0.00%) Min: 0.000 Max: 0.000 Avg: 0.000 StDev: 0.00000000
COMMIT      Count:  191 (  0.59%) Min: 0.000 Max: 0.002 Avg: 0.000 StDev: 0.00023698
###  Overall File Working Set (OFWS) analyzer  ###
Total number of files accessed: 2
FileHandle,NFSOps,NULL,GETATTR,SETATTR,LOOKUP,ACCESS,READLINK,READ,WRITE,CREATE,MKDIR,SYMLINK,MKNOD,REMOVE,RMDIR,RENAME,LINK,READDIR,READDIRPLUS,FSSTAT,FSINFO,PATHCONF,COMMIT
0100010001000000,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
01000101010000000c1b5452277d030000000000,32194,0,1,1,0,1,0,0,32000,0,0,0,0,0,0,0,0,0,0,0,0,0,191
### OFDWS Analyzer ###
Read total: 0 Write total: 1048576000
File ranked:
01000101010000000c1b5452277d030000000000 0 1048576000 <- it is dd 1M x 1000 times equal 1Gb
Once accessed: 100.00%
 
$ cat nfstrace.log
 
Loading module: './analyzers/libbreakdown.so' with args: []
Loading module: './analyzers/libofws.so' with args: []
Loading module: './analyzers/libofdws.so' with args: []
create new session 192.168.0.2:831 --> 192.168.0.1:2049 [TCP]
 
178048 packets received by filter
0 packets dropped by kernel
0 packets dropped by interface

We got 32000 WRITE procedures and 195 additional procedures on 111 Mb/s data transfer speed.

