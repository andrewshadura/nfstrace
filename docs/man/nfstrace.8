.\"
.\" nfstrace(8)
.\" 
.\" Author: Alexey Costroma 
.\" 
.\" Copyright (c) 2014 EPAM Systems
.\" 
.\" This file is part of Nfstrace.
.\" 
.\" Nfstrace is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, version 2 of the License.
.\" 
.\" Nfstrace is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\" 
.\" You should have received a copy of the GNU General Public License
.\" along with Nfstrace.  If not, see <http://www.gnu.org/licenses/>.
.\" 
.TH nfstrace 8 "24 September 2014" "version 0.3"
.\" --------------------- NAME -----------------------------------
.SH NAME
.B nfstrace
\- NFS tracing/monitoring/capturing/statistic tool
.\" --------------------- SYNOPSIS -------------------------------
.SH SYNOPSIS
.B nfstrace
[
.B \-LpTh
] [
.B \-m
.I drain|live|dump|stat
] [
.B \-i
.I interface
] [
.B \-f
.I \(dqbpf syntax\(dq
] [
.B \-s
.I 0..65535
]
.br
[
.B \-t
.I Milliseconds
] [
.B \-b
.I MBytes 
] [
.B \-d
.I in|out|inout
] [
.B \-a
.I path#opt1,opt2=val,...
]
.br
[
.B \-I
.I path
] [
.B \-O
.I path
] [
.B \-C
.I shell command
] [
.B \-D
.I MBytes
] [
.B \-M
.I 1..4000
] [
.B \-Q
.I 1..65535
]
.br
[
.B \-Z
.I username 
] [
.B \-v
.I 0|1|2 
]
.\" --------------------- DESCRIPTION ----------------------------
.SH DESCRIPTION
.TP
\fBIntroduction\fR
The \fBnfstrace\fR tool performs live Ethernet 1Gbps \- 10Gbps packet’s capturing and helps to determine NFS procedures in raw network traffic. It performs packet’s capturing, filtration, dumping traces, compression, statistical analysis, visualization and provides API for custom analysis modules.
.IP
The \fBnfstrace\fR supports following protocols: Ethernet \[u2010] IPv4 \[ba] IPv6 \[u2010] UDP \[ba] TCP \[u2010] SunRPC/NFSv3/NFSv4.
.TP
\fBHardware Interfaces\fR
The \fBnfstrace\fR captures raw packets from an Ethernet interface via libpcap interface of Linux (LSF) or FreeBSD (BPF) implementations. Current implementation makes assumption, that libpcap delivers correct TCP and UDP packets. Assembling Ethernet frames to IP packets and IP packets defragmentation performs in the Kernel. The software have tested on direct linked workstations with 1Gbps integrated NICs (Ethernet 1000baseT/Full).

The \fBnfstrace\fR demonstrates perfect performance even in live capturing/filtration/analysis mode.
.TP
\fBRunning Modes\fR
\fBLive\fR
(on-line analysis)
.br
Performs online capturing, filtration and live analysis detected NFS procedures by a pluggable analysis modules or print-out them to console (-T option).
.IP
\fBDump\fR
(on-line dumping)
.br
Performs online traffic capturing, filtration and dumping packets to the specified output file.
.IP
\fBDrain\fR
(off-line  dumping)
.br
Perfoms reading from input pcap file, filtration and dumping packets to the specified output .pcap file. removing all packets which are not related to NFS procedures
.IP
\fBStat\fR
(off-line analysis)
.br
Performs offline filtration of any .pcap file with captured traces and perform analysis by pluggable modules or print out found NFS procedures to console (-T option)
.
.TP
\fBPackets Filtration by BPF\fR
The nfstrace captures network traffic from NIC by libpcap. Libpcap provides portable interface to native Kernel API for capturing network traffic. All platforms implement low-level filtration of packets in Kernel-space by BPF. Default BPF filter in nfstrace is ‘port 2049’. It means that each packet, which delivered to user-space from the Kernel, satisfies following conditions: it has IPv4 or IPv6 header and it has TCP or UDP header with source or destination port number equals 2049(default NFS port). This filter is ‘heavy’ and IPv6 support is experimental. So, for faster filtration of IPv4-only traffic, use following BPF filter: ‘ip and port 2049’ (via -f option).
.TP
\fBPayload Filtration\fR
Let see to following case: writing 1Gb file to a NFSv3 storage:

This action will be performed by some LOOKUP, READDIRPLUS, COMMIT, GETATTR, etc. and some (thousands?) WRITE procedures of NFSv3 protocol. The nfstrace must catch all of them. How many RPC/NFSv3 procedures will be perform? It depends on wsize. Wsize is an option of NFS client, it defines the number of bytes that NFS uses during the writing files to an NFS server by one WRITE procedure. When wsize is 512 Kbytes a NFS client should (in general) perform 1Gb/512Kb WRITE procedures. So, for writing 1Gb file to a NFS storage, a NFS client (with wsize=512k) should perform 2000 WRITE procedures + some other procedures like GETATTR, etc.

Each NFSv3 procedure consists by two RPC messages: Call – request from client to server and Reply \– reply from server with result of requested procedure. Both RPC messages may contain data useful for analysis. Both RPC messages may contain thousands of payload bytes useless for analysis. The nfstrace must capture headers of calls and replies, and then match pairs of them to complete NFS procedures.

The ‘\-\-snaplen’ option set\-up the number of bytes of a packet for uprising from the Kernel to user-space. In case of TCP transport layer this options is useless because TCP connection is a bidirectional stream of data (instead of UDP that is form of interchange up to 64k datagrams). In case of NFS over TCP, the nfstrace must capture whole packets and copy them to user-space from the Kernel for DPI and performing NFS statistics analysis.

Finally, the nfstrace must filtrate whole NFS traffic passed from the Kernel to user-space and detects RPC/NFS message headers (up to 4Kbytes) within gigabytes of network traffic.

Detected headers are copied into internal buffers (or dumped to a .pcap file) for statistics analysis.

The key principle of Filtration in the nfstrace is \fB\(dqDiscard payload ASAP\(dq\fR.
The Filtration module works in separate thread that captures packets from network interface by libpcap. It matches a packet to a related session (TCP or UDP) and performs reassembling TCP flow from TCP segment of a packet. After that, a part of packet will be pass to RPCFiltrator. In case of NFSv4, full packet will be pass to RPCFiltrator, because it consists of several NFSv4 operations.

There are two RPCFiltrator in one TCP session. Both of them known state of current RPC message in related TCP flow. They can detect RPC messages and perform action on a packet – discard it or collect it for analysis.

The ‘-b’ option of nfstrace set-up size of capturing buffer in the Kernel of operating system in megabytes. This option is very critical for capturing performance.
The wsize and rsize of NFS connections are meaningful for filtration and analysis performance too.
.TP
\fBDump File Format\fR
The nfstrace uses libpcap file format for input and output files. Filtered packets are saved in .pcap format too. Any external tool (like Wireshark) may be used to inspect filtered traces. Filtrated headers of RPC messages are passed from Filtration to Analysis modules in raw data buffers via Queue of Analysis module.
.TP
\fBAPI/Pluggable Analysis Modules\fR
The API of nfstrace provides C++ headers with definition of IAnalyzer interface and couple of related types and NFS data structures and functions. An IAnalyzer interface is a set of NFS handlers that will be called by Analysis module for each NFS procedure. All definitions of types and constants, required for development analysis modules, are defined in files in nfstrace/api/ directory. They should be included by <nfstrace/api/plugin_api.h> header.
.IP
A pluggable analysis module should be a dynamically linked shared object and should export following C functions:
.IP
const char* usage ();
.br
IAnalyzer*  create (const char* opts);
.br
void        destroy (IAnalyzer* instance);
.IP
and should contain the following macro after declaration of these functions for proper usage:
.IP
NST_PLUGIN_ENTRY_POINTS (&usage, &create, &destroy)
.IP
The \fBusage\fR() function must return C-string with description of module and required parameters for creation an instance of analyzer, this string will be shown in output of \(dq\-\-help\(dq option.
.br
The IAnalyzer* \fBcreate\fR(const char* opts) must create and return an instance of analyzer accordingly to passed options.
.br
The void \fBdestroy\fR(IAnalyzer* instance) must destroy previously created analyzer instance and performs required clean\-up (for instance \- close connection to a database).
.IP
All existing analyzers are implemented as pluggable analysis modules and may be attached to nfstrace via \-a option.
.TP
.B Operation Breakdown Analyzer (OB)
The OB implemented as pluggable analysis module libbreakdown.so.

The NFS procedure latency have calculate as difference between timestamp of come\-in last TCP or UDP packet of header of RPC/NFS reply-message and timestamp of come\-in last TCP or UDP packet of header of related NFS call\-message.

Standard Deviation of latency may be calculate by two algorithms. Two-pass algorithm generates correct standard deviation value but requires a lot of memory for storage all latencies till final computation. One-pass algorithm is memory-efficient but it can accumulate computation error in case of large number of small latencies. OB implements both algorithms. They may be chosen by passing parameter while attaching OB analyzer to nfstrace.

MEM means Knuth’s one-pass algorithm. ACC means stable two-pass algorithm. ACC is default.
.TP
\fBSecurity\fR
For security purposes it is highly recommended to use \fB\-\-droproot\fR=username option.
.\" --------------------- OPTIONS --------------------------------
.SH OPTIONS
Nfstrace can usually be run without arguments and will obtain useful results. However, for those occasions when the defaults are not good enough, the following options are provided:
.TP
\fB\-m, \-\-mode=\fRlive|dump|drain|stat
.IP
Set running mode. (see description above)
 (default:live)
.TP
\fB\-i, \-\-interface=\fRINTERFACE
.IP
Listen interface, it is required for live and dump modes.
 (default:PCAP-DEFAULT)
.TP
\fB\-f, \-\-filtration=\fR\(dqBPF\(dq
.IP
A packet filtration in libpcap BPF syntax.
 (default:port 2049)
.TP
\fB\-s, \-\-snaplen=\fR0..65535
.IP
Max length of raw captured packet. May be used ONLY FOR UDP.
 (default:65536)
.TP
\fB\-t, \-\-timeout=\fRMilliseconds
.IP
Set the read timeout that will be used on a capture.
 (default:100)
.TP
\fB\-b, \-\-bsize=\fRMBytes
.IP
Size of capturing kernel buffer.
 (default:20)
.TP
\fB\-p, \-\-promisc\fR
.IP
Put the interface into promiscuous mode.
 (default:true)
.TP
\fB\-d, \-\-direction=\fRin|out|inout
.IP
Set the direction for which packets will be captured.
 (default:inout)
.TP
\fB\-a, \-\-analysis=\fRPATH#opt1,opt2=val,...
.IP
Specify path to analysis module and set desired options.
 (default:)
.TP
\fB\-I, \-\-ifile=\fRPATH
.IP
Input file for stat mode, the '-' means stdin.
 (default:PROGRAMNAME-BPF.pcap)
.TP
\fB\-O, \-\-ofile=\fRPATH
.IP
Output file for dump mode, the '-' means stdout.
 (default:PROGRAMNAME-BPF.pcap)
.TP
\fB\-C, \-\-command=\fR\(dqshell command\(dq
.IP
Execute command for each dumped file.
 (default:)
.TP
\fB\-D, \-\-dump-size=\fRMBytes
.IP
Size of dumping file portion, 0 = no limit.
 (default:0)
.TP
\fB\-L, \-\-list\fR
.IP
List all available network interfaces.
The -L flag will not be supported if nfstrace was built with an older version of libpcap that lacks the pcap_findalldevs() function.
 (default:false)
.TP
\fB\-M, \-\-msg-header=\fR1..4000
.IP
RPC message will be truncated to this limit in bytes before passing to Analysis.
 (default:512)
.TP
\fB\-Q, \-\-qcapacity=\fR1..65535
.IP
Initial queue capacity of RPC messages.
 (default:4096)
.TP
\fB\-T, \-\-trace\fR
.IP
Print collected NFSv3 procedures, true if no modules were passed(by \-a).
 (default:false)
.TP
\fB\-Z, \-\-droproot=\fRusername
.IP
Drops root privileges, after opening the capture device, but before reading from it.
 (default:)
.TP
\fB\-v, \-\-verbose=\fR0|1|2
.IP
Level of print out additional information.
 (default:1)
.TP
\fB\-h, \-\-help\fR
.IP
Print this help message and usage for modules passed via \-a options, then exit.
 (default:false)
.\" --------------------- EXAMPLES -------------------------------
.SH EXAMPLES
.TP
.B On\-line dumping (\-\-mode=dump)
Live capture NFS traffic over TCP or UDP to port 2049 from enp0s25 network interface, print out full information about filtered NFS procedures to console, analyze filtered packets by Operation Breakdown analyzer, dump packets with NFS traffic to dump.pcap file and drop root priveleges to user.

.B $ sudo nfstrace \-\-mode=dump \-\-interface enp0s25 \-\-filtration=\(dqip and port 2049\(dq -\-analysis libbreakdown.so \-\-trace \-\-verbose 2 \-O dump.pcap \-\-droproot user
.TP
.B Off\-line analysis (\-\-mode=stat)
Read previously captured eth\-ipv4\-tcp\-nfsv4.pcap, analyze by Operation Breakdown analyzer and print out full information about filtered NFS procedures to console.

.B $ nfstrace \-\-mode=stat \-\-analysis libbreakdown.so \-\-ifile ./eth\-ipv4\-tcp\-nfsv4.pcap \-\-trace \-\-verbose 2
.TP
.B On\-line analysis (\-\-mode=live)
Live capture NFS traffic over TCP or UDP to port 2049 from enp0s25 network interface, print out full information about filtered NFS procedures to console, analyze filtered packets by Operation Breakdown analyzer and drop root priveleges to user.

.B $ sudo nfstrace \-\-mode=live \-\-interface enp0s25 \-\-filtration=\(dqip and port 2049\(dq -\-analysis libbreakdown.so \-\-trace \-\-verbose 2 \-\-droproot user
.TP
.B Off\-line dumping (\-\-mode=drain)
Perfoms reading traffic from input pcap file, filtration and dumping packets to the specified output .pcap file. removing all packets which are not related to NFS procedures.

.B $ nfstrace \-\-mode=drain -I ./capture.pcap \-O nfsonly.pcap

.TP
.B Compression
The compression and decompression performs by external tools. It is very similar to tcpdump \-z option:
.IP
.B $ sudo ./nfstrace \-\-mode=dump \-i eth0 -f \(dqip and port 2049\(dq \-O dump.pcap \-\-dump-size=10 \-C \(dqbzip2 \-f \-9\(dq
.IP
This command run nfstrace in dumping mode (\-\-mode=dump). Capturing from network interface requires super-user privileges, so \– sudo. In this mode, the application performs live capturing packets from network interface eth0 (\-i eth0) and filtration NFS procedures (calls + replies). Then it dumps filtered packets that contains RPC/NFS headers (or parts of these headers). Filtration in the Kernel performs by BPF filter (\-f \(dqip and port 2049\(dq). It means that we are interested in any TCP or UDP packets send to or from port 2049(default port for NFS servers) over IPv4. This command specifies the output file dump.pcap (\-O dump.pcap). In case of the output file will be huge (tons of Mb) it will be divided to parts by 10Mb (\-\-dump-size=10).

When the part’s dumping is compete, the dumping will be continued to another file (dump.pcap\-1, dump.pcap\-2, … dump.pcap\-N) and nfstrace spawns child process (by fork() & exec() calls) that executes command (passed by \-C \(dqbzip2 \-f \-9\(dq) \(dqbzip2 \-f \-9 dump.pcap\(dq over each dumped part.

After dumping interruption via Control\-C(SIGINT) the application closes with flushing captured data and we get a set of compressed parts of filtered traffic:
dump.pcap.bz2, dump.pcap\-1.bz2, dump.pcap\-2.bz2 ... dump.pcap\-N.bz2.

These compressed parts have filtered data and may be join to one .pcap file by: 

.B $ ls dump.pcap*.bz2 | sort \-n \-t \- \-k 2 | xargs bzcat > dump.pcap

The ls and sort commands sort file names of parts right order and a pipe passes them to bzcat tool to decompressing parts to one huge file dump.pcap.
dump.pcap file may be open in any external tool that know .pcap format, f.e. \– Wireshark. Only the dump.pcap.bz2 has .pcap file header, other parts have only data and they are not be recognized as .pcap file by external tool.
The compressed parts of dump can be decompressed by bzcat tool to stdin of nfsrace for offline analysis by an analyzer module or prints-out to console:
 
.B $ ls dump.pcap*.bz2 | sort -n \-t \- \-k 2 | xargs bzcat | ./nfstrace \-\-mode=stat \-I \- \-T
.\" --------------------- FILES ----------------------------------
.SH FILES
.TP
API headers
\fB/usr/include/nfstrace/api/\fR
.TP
Pluggable Analysis Modules (PAMs)
\fB/usr/lib/\fR
.\" ---------------------- BUGS ----------------------------------
.SH BUGS
.P
Any problems, bugs, questions, desirable enhancements, etc.
.br
should be sent to \fB<nfstrace@epam.com>\fR
.\" -------------------- COPYRIGHT -------------------------------
.SH COPYRIGHT
Copyright \[co] 2013,2014 EPAM Systems

Nfstrace is free software: you can redistribute it and/or modify
.br
it under the terms of the GNU General Public License as published by
.br
the Free Software Foundation, version 2 of the License.

Nfstrace is distributed in the hope that it will be useful,
.br
but WITHOUT ANY WARRANTY; without even the implied warranty of
.br
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.br
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
.br
along with Nfstrace.  If not, see <http://www.gnu.org/licenses/>.
.\" -------------------- AUTHORS ---------------------------------
.SH AUTHORS
Written by:
.IP
Vitali Adamenka <Vitali_Adamenka@epam.com>
.IP
Yauheni Azaranka <Yauheni_Azaranka@epam.com>
.IP
Alexey Costroma <Alexey_Costroma@epam.com>
.IP
.B Dzianis Huznou <Dzianis_Huznou@epam.com>
.IP
.B Pavel Karneliuk <Pavel_Karneliuk@epam.com>
.IP
Mikhail Litvinets <Mikhail_Litvinets@epam.com>
.\" -------------------- SEE ALSO --------------------------------
.SH SEE ALSO
.R bpf(4),
.R pcap(3PCAP),
.R nfsstat (8).
